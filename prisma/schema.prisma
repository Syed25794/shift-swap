generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  MANAGER
}

model User {
  id               String                 @id @default(cuid())
  name             String
  email            String                 @unique
  role             Role

  shifts           Shift[]               @relation("AssignedShifts")
  swapRequests     SwapRequest[]         @relation("RequestedSwaps")
  volunteerSwaps   SwapRequest[]         @relation("VolunteerSwaps")
  approvalsGiven   ApprovalLog[]         @relation("ManagerApprovals")
  volunteeredSwaps SwapRequestVolunteer[]
}

model Shift {
  id            String          @id @default(cuid())
  date          DateTime
  time          String
  role          String
  userId        String

  assignedTo    User            @relation("AssignedShifts", fields: [userId], references: [id])
  swapRequests  SwapRequest[]
}

model SwapRequest {
  id             String                  @id @default(cuid())
  shiftId        String
  requesterId    String
  volunteerId    String?
  note           String?
  status         String                  @default("open") // open | matched | approved | rejected
  createdAt      DateTime                @default(now())

  shift          Shift                   @relation(fields: [shiftId], references: [id])
  requester      User                    @relation("RequestedSwaps", fields: [requesterId], references: [id])
  volunteer      User?                   @relation("VolunteerSwaps", fields: [volunteerId], references: [id])

  volunteers     SwapRequestVolunteer[]
  approvalLogs   ApprovalLog[]
}

model SwapRequestVolunteer {
  id            String        @id @default(cuid())
  swapRequestId String
  userId        String

  swapRequest   SwapRequest   @relation(fields: [swapRequestId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@unique([swapRequestId, userId]) // to prevent duplicate volunteers
}

model ApprovalLog {
  id            String        @id @default(cuid())
  swapRequestId String
  managerId     String
  status        String
  comment       String

  swapRequest   SwapRequest   @relation(fields: [swapRequestId], references: [id])
  approvedBy    User          @relation("ManagerApprovals", fields: [managerId], references: [id])
}
